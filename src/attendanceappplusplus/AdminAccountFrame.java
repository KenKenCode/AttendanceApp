package attendanceappplusplus;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import static attendanceappplusplus.adminInformationFrame.adminUserName;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import java.awt.*;
import java.util.Calendar;
import java.util.GregorianCalendar;
import net.proteanit.sql.DbUtils;
import java.awt.Color;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.SwingUtilities;
import java.util.*;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Ken
 */
public class AdminAccountFrame extends javax.swing.JFrame {
Connection con = null;
    PreparedStatement pstadminaccountframe = null;
    ResultSet rs = null;
    /**
     * Creates new form AdminAccountFrame
     */
    public AdminAccountFrame() {
        initComponents();
        CurrentDate(); //For current date
        DataAdminAccountFrameNoteTaking(); //For getting the records in the notetakingforadmin table in attendancedatabase database
        changeAccountNameLabel(); 
        changeAccountTableNameLabel();
        this.setLocationRelativeTo(null);
    }
    
    public void CurrentDate() {
        //For displaying the date
        Calendar dateandtimeone = new GregorianCalendar();
        int month = dateandtimeone.get(Calendar.MONTH);
        int year = dateandtimeone.get(Calendar.YEAR);
        int day = dateandtimeone.get(Calendar.DAY_OF_MONTH);

        MenuCurrentDate.setText((month + 1) + "/" + day+ "/" + year);
        
        /*
        int second = dateandtimeone.get(Calendar.SECOND);
        int minute = dateandtimeone.get(Calendar.MINUTE);
        int hour = dateandtimeone.get(Calendar.HOUR);
        
        MenuCurrentTime.setText(hour + ":" + minute + ":" + second);
         */
    }
    
    //For highlighting the found word in the JTextArea
    class HighlightFind extends DefaultHighlighter.DefaultHighlightPainter {

        public HighlightFind(Color c) {
            super(c);
           
    }
     
        
    }
    //Set color highlight to the word that is found
        Highlighter.HighlightPainter highlightpaintfind = new HighlightFind(Color.yellow);
        
        //Fore removing the highlight:
        public void removeTheHighlight(JTextComponent componentToRemoveHighlight) {
            Highlighter highlightremoval = componentToRemoveHighlight.getHighlighter();
            Highlighter.Highlight[] highlightremovaltwo = highlightremoval.getHighlights();
            
            for (int i = 0; i < highlightremovaltwo.length; i++ ) {
                if (highlightremovaltwo[i].getPainter() instanceof HighlightFind){
                    highlightremoval.removeHighlight(highlightremovaltwo[i]);
                }
            }
        
        }
        
    public void highlight(JTextComponent textComponent, String patternlight) {
            
        removeTheHighlight(textComponent);        
            try {
                
                Highlighter lighttheword = textComponent.getHighlighter();
                Document documentlight = textComponent.getDocument();
                String textlight = documentlight.getText(0, documentlight.getLength());
                int pos = 0;
                
                while ((pos = textlight.toUpperCase().indexOf(patternlight.toUpperCase(), pos))>=0) {
                    lighttheword.addHighlight(pos, pos+patternlight.length(), highlightpaintfind);
                    
                    pos += patternlight.length();
                    
                }
            }
            catch(Exception e) {
                JOptionPane.showMessageDialog(null, "An error occurred while finding the word");
            }
            
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        AddNoteButton = new javax.swing.JButton();
        add_stud = new javax.swing.JButton();
        label1 = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        AreaForTakingNotes = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableForNoteRecordsAdminAccountFrame = new javax.swing.JTable();
        adminAccountFrameTitleNote = new javax.swing.JLabel();
        TextTitleForNote = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        adminAccountFrameFindWordLabel = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        AdminUserNameLabel = new javax.swing.JLabel();
        currentTableNameOfAccountLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        MenuCurrentDate = new javax.swing.JMenu();

        jMenuItem2.setText("Menu Item");
        jPopupMenu2.add(jMenuItem2);

        jMenuItem3.setText("Menu Item 3");
        jPopupMenu2.add(jMenuItem3);

        jMenuItem4.setText("Menu Item 4");
        jPopupMenu2.add(jMenuItem4);

        jMenuItem5.setText("Menu Item 5");
        jPopupMenu2.add(jMenuItem5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(108, 122, 137));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel1MouseReleased(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon("C:\\Users\\Ken\\Pictures\\Grade 12 all photos\\AdminTemplateProfilePictureAPlusPlus.png")); // NOI18N
        jButton5.setContentAreaFilled(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton5MouseEntered(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        AddNoteButton.setText("Add note");
        AddNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNoteButtonActionPerformed(evt);
            }
        });

        add_stud.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        add_stud.setText("Add Student");
        add_stud.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add_studMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                add_studMousePressed(evt);
            }
        });
        add_stud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_studActionPerformed(evt);
            }
        });

        label1.setFont(new java.awt.Font("Arial Black", 0, 48)); // NOI18N
        label1.setForeground(new java.awt.Color(240, 248, 255));
        label1.setText("Attendance++");

        AreaForTakingNotes.setColumns(20);
        AreaForTakingNotes.setRows(5);
        jScrollPane1.setViewportView(AreaForTakingNotes);

        tableForNoteRecordsAdminAccountFrame.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Notes", "Title"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableForNoteRecordsAdminAccountFrame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableForNoteRecordsAdminAccountFrameMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableForNoteRecordsAdminAccountFrame);
        if (tableForNoteRecordsAdminAccountFrame.getColumnModel().getColumnCount() > 0) {
            tableForNoteRecordsAdminAccountFrame.getColumnModel().getColumn(0).setResizable(false);
            tableForNoteRecordsAdminAccountFrame.getColumnModel().getColumn(1).setResizable(false);
        }

        adminAccountFrameTitleNote.setForeground(new java.awt.Color(255, 255, 255));
        adminAccountFrameTitleNote.setText("Title");

        TextTitleForNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextTitleForNoteActionPerformed(evt);
            }
        });

        jButton1.setText("Update note");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        adminAccountFrameFindWordLabel.setForeground(new java.awt.Color(255, 255, 255));
        adminAccountFrameFindWordLabel.setText("Find");

        jButton6.setText("Find");
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete note");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        AdminUserNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        AdminUserNameLabel.setText("AdminUserName");

        currentTableNameOfAccountLabel.setForeground(new java.awt.Color(255, 255, 255));
        currentTableNameOfAccountLabel.setText("TableName");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(add_stud, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(adminAccountFrameFindWordLabel)
                                .addComponent(adminAccountFrameTitleNote))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jTextField2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(AddNoteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(TextTitleForNote, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton2))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(currentTableNameOfAccountLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AdminUserNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(AdminUserNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentTableNameOfAccountLabel)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adminAccountFrameTitleNote)
                            .addComponent(TextTitleForNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddNoteButton)
                            .addComponent(jButton6)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(adminAccountFrameFindWordLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(add_stud, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jMenu1.setText("Language");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("View");

        jMenuItem6.setText("Custom View");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Font Color");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Tools");

        jMenuItem1.setText("Templates");
        jMenu4.add(jMenuItem1);

        jMenuBar1.add(jMenu4);

        MenuCurrentDate.setText("Current date");
        MenuCurrentDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuCurrentDateActionPerformed(evt);
            }
        });
        jMenuBar1.add(MenuCurrentDate);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void add_studActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_studActionPerformed
        
        /*try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/attendancedatabase?useTimezone=true&serverTimezone=UTC", "root", "");
            String changeTableContentByAccount = "SELECT * FROM " + currentTableNameOfAccountLabel.getText().toString() + "";
            pstadminaccountframe = con.prepareStatement(changeTableContentByAccount);
            rs = pstadminaccountframe.executeQuery();
            Student_Register.myTB.setModel(DbUtils.resultSetToTableModel(rs));
            
        } catch (Exception e){
            JOptionPane.showMessageDialog(null, e);
        }*/
        new Student_Register().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_add_studActionPerformed

    private void AddNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNoteButtonActionPerformed
        // TODO add your handling code here:

        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/attendancedatabase?useTimezone=true&serverTimezone=UTC", "root", "");
            String query = "INSERT INTO notetakingforadmin"
            + "(TitleOfNotes, Notes)"
            + "VALUES (?, ?)";
            

            pstadminaccountframe = con.prepareStatement(query);
            pstadminaccountframe.setString(1, TextTitleForNote.getText());
            pstadminaccountframe.setString(2, AreaForTakingNotes.getText());
            
            pstadminaccountframe.executeUpdate();

            JOptionPane.showMessageDialog(null, "Added!");
            

        } catch (SQLException | HeadlessException ex) {
            JOptionPane.showMessageDialog(null, "An error occurred" + ex);

        }

        DataAdminAccountFrameNoteTaking();

    }//GEN-LAST:event_AddNoteButtonActionPerformed

    private void jButton5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5MouseEntered

    private void TextTitleForNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextTitleForNoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextTitleForNoteActionPerformed

    private void MenuCurrentDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuCurrentDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MenuCurrentDateActionPerformed

    private void tableForNoteRecordsAdminAccountFrameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableForNoteRecordsAdminAccountFrameMouseClicked
        // TODO add your handling code here:
        
        int selectANoteRecord = tableForNoteRecordsAdminAccountFrame.getSelectedRow();
        
        TableModel modelForNotes = tableForNoteRecordsAdminAccountFrame.getModel();
        
        //Display selected rows into the JTextArea
        try {
            TextTitleForNote.setText(modelForNotes.getValueAt(selectANoteRecord, 0).toString()); 
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Field might be empty, try to create notes in that field \n Error code: " + e);
        }
        try {
            AreaForTakingNotes.setText(modelForNotes.getValueAt(selectANoteRecord, 1).toString()); //Must start at 0 for first column
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Field might be empty, try to create notes in that field \n Error code: " + e);
        }
        
    }//GEN-LAST:event_tableForNoteRecordsAdminAccountFrameMouseClicked

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        try {
        new ListOfHelp().setVisible(true);
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e); 
        }
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int recordsinnotes = tableForNoteRecordsAdminAccountFrame.getSelectedRow();

            TableModel recordsinnotesmodel = tableForNoteRecordsAdminAccountFrame.getModel();
        int confirmationtodeletenotes = JOptionPane.showConfirmDialog(null, "Are you sure to delete note(s)?", "Notice", JOptionPane.YES_NO_OPTION);
        if (confirmationtodeletenotes == JOptionPane.YES_OPTION) {
            try {
                /*
                To delete in sql
                DELETE FROM table_name WHERE some_column = some_value;
                */
            String query = "DELETE FROM notetakingforadmin WHERE TitleOfNotes = ?";
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/attendancedatabase?useTimezone=true&serverTimezone=UTC", "root", "");
            pstadminaccountframe = con.prepareStatement(query);

            pstadminaccountframe.setString(1, tableForNoteRecordsAdminAccountFrame.getValueAt(recordsinnotes, 1).toString());
            
            
            JOptionPane.showMessageDialog(null, "Deleted!");
            pstadminaccountframe.executeUpdate();
            DataAdminAccountFrameNoteTaking();
            TextTitleForNote.setText("");
            AreaForTakingNotes.setText("");

        } catch (SQLException | HeadlessException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        /*
        SQL UPDATE syntax:
        UPDATE table_name SET column1 = value, column2 = value, ... WHERE some_column = some_value
        or
        UPDATE table_name SET column1 = value, column2 = value;
        */
        
         try {
            String query = "UPDATE notetakingforadmin SET Notes = ?, TitleOfNotes = ?"; //As of 01/11/2019 there is a problem in sql connection. Right syntax of UPDATE syntax might help, searcg the right syntax for UPDATE syntax for sql
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/attendancedatabase?useTimezone=true&serverTimezone=UTC", "root", "");
            pstadminaccountframe = con.prepareStatement(query);

            pstadminaccountframe.setString(2, TextTitleForNote.getText());
            pstadminaccountframe.setString(1, AreaForTakingNotes.getText());
            
            

            pstadminaccountframe.executeUpdate();
            JOptionPane.showMessageDialog(null, "Updated!");
            DataAdminAccountFrameNoteTaking();
        } catch (SQLException | HeadlessException ex) {
            JOptionPane.showMessageDialog(null, ex);

        }
        DataAdminAccountFrameNoteTaking();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void add_studMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_studMousePressed
        // TODO add your handling code here:
        
        if (SwingUtilities.isRightMouseButton(evt)) {
            JOptionPane.showMessageDialog(null, "You pressed the right click");
        } 
    }//GEN-LAST:event_add_studMousePressed

    private void jPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseReleased
        // TODO add your handling code here:
        
        if (evt.isPopupTrigger()) {
            jPopupMenu2.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jPanel1MouseReleased

    private void add_studMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_studMouseClicked
        // TODO add your handling code here:
        //To double click in java using
        if (evt.getClickCount() == 2) {
            JOptionPane.showMessageDialog(null, "Double click");
        }
        
    }//GEN-LAST:event_add_studMouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        highlight(AreaForTakingNotes, jTextField2.getText());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        new adminInformationFrame().setVisible(true);
         try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/attendancedatabase?useTimezone=true&serverTimezone=UTC", "root", "");
            String changeAdminUserNameLabel = "SELECT UserName, FirstName, LastName FROM adminaccountregistration WHERE NumberSecured = 1";
        pstadminaccountframe = con.prepareStatement(changeAdminUserNameLabel);
        rs = pstadminaccountframe.executeQuery();
        
        
        while(rs.next()){
            String name = rs.getString("UserName");
            adminUserName.setText(name);
            String firstName = rs.getString("FirstName");
            adminInformationFrame.firstNameLabel.setText(firstName);
            String lastName = rs.getString("LastName");
            adminInformationFrame.lastNameLabel.setText(lastName);
        }
        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        new FontColorChooser().setVisible(true);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    public void DataAdminAccountFrameNoteTaking() {
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/attendancedatabase?useTimezone=true&serverTimezone=UTC", "root", "");
            String sql = "SELECT * FROM notetakingforadmin";

            pstadminaccountframe = con.prepareStatement(sql);
            rs = pstadminaccountframe.executeQuery(sql);
            tableForNoteRecordsAdminAccountFrame.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    public void changeAccountNameLabel() {//For changing the account name label text in AdminAccountFrame
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/attendancedatabase?useTimezone=true&serverTimezone=UTC", "root", "");
            String changeAdminUserNameLabel = "SELECT UserName FROM adminaccountregistration WHERE NumberSecured = 1";
        pstadminaccountframe = con.prepareStatement(changeAdminUserNameLabel);
        rs = pstadminaccountframe.executeQuery();
        
        while(rs.next()){
            String name = rs.getString("UserName");
            AdminUserNameLabel.setText(name);
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
   
    
    public void changeAccountTableNameLabel() {//For changing the account table name label text in AdminAccountFrame
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/attendancedatabase?useTimezone=true&serverTimezone=UTC", "root", "");
            String changeAdminUserNameLabel = "SELECT TableName FROM adminaccountregistration WHERE NumberSecured = 1";
        pstadminaccountframe = con.prepareStatement(changeAdminUserNameLabel);
        rs = pstadminaccountframe.executeQuery();
        
        while(rs.next()){
            String tableName = rs.getString("TableName");
            currentTableNameOfAccountLabel.setText(tableName);
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminAccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminAccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminAccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminAccountFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminAccountFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNoteButton;
    public static javax.swing.JLabel AdminUserNameLabel;
    private javax.swing.JTextArea AreaForTakingNotes;
    private javax.swing.JMenu MenuCurrentDate;
    private javax.swing.JTextField TextTitleForNote;
    private javax.swing.JButton add_stud;
    public static javax.swing.JLabel adminAccountFrameFindWordLabel;
    public static javax.swing.JLabel adminAccountFrameTitleNote;
    public static javax.swing.JLabel currentTableNameOfAccountLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField2;
    private java.awt.Label label1;
    private javax.swing.JTable tableForNoteRecordsAdminAccountFrame;
    // End of variables declaration//GEN-END:variables
}
